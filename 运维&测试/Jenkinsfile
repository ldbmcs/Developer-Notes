//pipeline表示定义整个流程
pipeline {
  agent any
  //stages表示定义流程中的各个操作阶段
  stages {
    //代码检出阶段，指定项目的git地址，包括验证时使用的credential
    //env.GIT_REPO_URL、env.CREDENTIALS_ID等都为系统环境变量，相关信息在关联私有Gitlab到CODING系统时已添加，无需自行配置
    stage('检出') {
      steps {
        checkout([$class: 'GitSCM',
        branches: [[name: env.GIT_BUILD_REF]],
        userRemoteConfigs: [[
          url: env.GIT_REPO_URL,
          credentialsId: env.CREDENTIALS_ID
        ]]])
      }
    }
    //代码编译阶段，直接执行mvn编译命令
    stage('编译') {
      steps {
        echo '开始执行编译'
        sh 'mvn package -Dmaven.test.skip'
      }
    }
    //Docker镜像构建阶段，使用docker build命令构建镜像
    //使用environments里的CODING_DOCKER_IMAGE_NAME变量作为镜像名，使用系统变量作为镜像版本，此处可自行定义，例如镜像版本处可加上分支信息
    stage('构建 Docker 镜像') {
      steps {
        echo '开始构建镜像'
        sh "docker build -f Dockerfile -t ${env.CODING_DOCKER_IMAGE_NAME}:latest ."
      }
    }
    //推送镜像阶段，将镜像推送到指定镜像仓库
    //CODING_DOCKER_REG_HOST也是在environments里定义的变量，使用的是CODING系统制品库对应的镜像仓库，也可指定推送到私有镜像仓库
    stage('推送到 CODING Docker 制品库') {
      steps {
        echo '开始推送镜像'
        script {
          docker.withRegistry(
            "${env.CCI_CURRENT_WEB_PROTOCOL}://${env.CODING_DOCKER_REG_HOST}",
            "${env.CODING_ARTIFACTS_CREDENTIALS_ID}"
          ) {
            // ${env.GIT_COMMIT}
            imageName="${env.CODING_DOCKER_IMAGE_NAME}:latest"
            imageFullPath="${env.CODING_DOCKER_REG_HOST}/${env.CODING_DOCKER_IMAGE_NAME}:latest"
            docker.image(imageName).push()
          }
        }

        echo '镜像推送完成'
      }
    }
    //部署阶段，credentialsId为需要部署的k8s集群的凭据id，凭据创建在前文已提到
    stage('部署到 K8s') {
      steps {
        echo '部署到k8s中...'
        script {
          //请修改 credentialsId：填入 k8s 凭据ID(项目设置-开发者选项-票据管理)
          withKubeConfig([credentialsId: '9597362b-46fb-4085-9ac9-319c18bf748c']) {
            //使用 kubectl 创建 K8s 密钥：用于让k8s集群可以从镜像仓库拉取镜像然后部署，其中 DOCKER_USER 和 DOCKER_PASSWORD 为镜像仓库的用户名和密码，需要在CODING制品库中通过「使用访问令牌生成配置」功能获取
            sh(script: "kubectl create secret docker-registry coding --docker-server=${env.CODING_DOCKER_REG_HOST} --docker-username=${env.DOCKER_USER} --docker-password=${env.DOCKER_PASSWORD} --docker-email=support@coding.net", returnStatus: true)
 
            //使用 kubectl 修改 K8s deployment：指定 Docker 镜像链接和密钥，需注意imageFullPath为包含host的完整路径，如taohuaxiaoxiao-docker.pkg.coding.net/spring-test/spring-test/spring-boot-demo:246e9996b893cf7ca9b9e515207c1b234150b34d
            // 请修改下面命令中出现的两处 spring-boot-demo 值，第一处为已创建好的Deployment的名称，第二处为本项目部署后对应的container的名称
            sh "kubectl patch deployment alipay-fundauth --patch '{\"spec\": {\"template\": {\"spec\": {\"containers\": [{\"name\": \"alipay-fundauth\", \"image\": \"${imageFullPath}\"}], \"imagePullSecrets\": [{\"name\": \"coding\"}]}}}}' --namespace=ldbmcs"
          }
        }
      }
    }
  }
  environment {
    CODING_DOCKER_REG_HOST = "${env.CCI_CURRENT_TEAM}-docker.pkg.${env.CCI_CURRENT_DOMAIN}"
    CODING_DOCKER_IMAGE_NAME = "${env.PROJECT_NAME.toLowerCase()}/${env.DOCKER_REPO_NAME}/${env.DOCKER_IMAGE_NAME}"
  }
}